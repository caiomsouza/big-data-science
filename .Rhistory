1+1
## Look for required packages, install them if not already installed
list.of.packages <- c('streamR','ROAuth')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## load the required packages
l <- lapply(list.of.packages, require, character.only=T,  quietly=TRUE)
## get parameters
args <- commandArgs(trailingOnly = TRUE)
#str(args)
## Create or load the OAUTH credential file
if(!file.exists('pdi_R_twitter_oauth.Rdata')) {
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "xxxxxxxxxxxxxxxxxxxxxx"
consumerSecret <- "xxxxxxxxxxxxxxxxxxxxxxxxx"
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,
requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
save(my_oauth, file = "pdi_R_twitter_oauth.Rdata")
} else {
load('pdi_R_twitter_oauth.Rdata')
}
## Look for required packages, install them if not already installed
## Look for required packages, install them if not already installed
## Look for required packages, install them if not already installed
## Look for required packages, install them if not already installed
## Look for required packages, install them if not already installed
## Look for required packages, install them if not already installed
## Look for required packages, install them if not already installed
list.of.packages <- c('streamR','ROAuth')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## load the required packages
l <- lapply(list.of.packages, require, character.only=T,  quietly=TRUE)
## get parameters
args <- commandArgs(trailingOnly = TRUE)
#str(args)
## Create or load the OAUTH credential file
if(!file.exists('pdi_R_twitter_oauth.Rdata')) {
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "CpxWVyRYrmpKbcZ2VOOmCqMqh"
consumerSecret <- "95k4BJav8Wc4oKtJg2VXteQS88eOBYMbXVMu4zjQKs3Ow94n50"
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,
requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
save(my_oauth, file = "pdi_R_twitter_oauth.Rdata")
} else {
load('pdi_R_twitter_oauth.Rdata')
}
gc()
rm(list = ls())
setwd("~/GitHub/caiomsouza/big-data-science")
library(RJDBC)
hivedrv <- JDBC("org.apache.hive.jdbc.HiveDriver",
c(list.files("drivers/cdh55/hadoop",pattern="jar$",full.names=T),
list.files("drivers/cdh55/hive",pattern="jar$",full.names=T)))
hivecon <- dbConnect(hivedrv, "jdbc:hive2://192.168.0.29:10000/default", "hive", "")
query = "select * from tweets_json2 LIMIT 10"
hres <- dbGetQuery(hivecon, query)
query = "
ADD JAR /home/cloudera/git-repos/cdh-twitter-example/hive-serdes/target/hive-serdes-1.0-SNAPSHOT.jar;
select * from tweets_json2 LIMIT 10"
hres <- dbGetQuery(hivecon, query)
query = "
ADD JAR /home/cloudera/git-repos/cdh-twitter-example/hive-serdes/target/hive-serdes-1.0-SNAPSHOT.jar;
select * from tweets_json2 LIMIT 10;"
hres <- dbGetQuery(hivecon, query)
query = "ADD JAR /home/cloudera/git-repos/cdh-twitter-example/hive-serdes/target/hive-serdes-1.0-SNAPSHOT.jar"
hres <- dbGetQuery(hivecon, query)
# Table: customers
query = "select * from tweets_json2 LIMIT 10"
hres <- dbGetQuery(hivecon, query)
head(hres)
class(hres)
head(hres$tweets_json2.id)
head(hres$tweets_json2.user)
head(hres$tweets_json2.text)
gc()
rm(list = ls())
setwd("~/GitHub/caiomsouza/big-data-science")
#install.packages("RJDBC",dep=TRUE)
library(RJDBC)
#Load Hive JDBC driver
hivedrv <- JDBC("org.apache.hive.jdbc.HiveDriver",
c(list.files("drivers/cdh55/hadoop",pattern="jar$",full.names=T),
list.files("drivers/cdh55/hive",pattern="jar$",full.names=T)))
# jdbc:hive2://192.168.0.29:10000/default
# org.apache.hive.jdbc.HiveDriver
# user: hive
# password: empty
#Connect to Hive service
#hivecon <- dbConnect(hivedrv, "jdbc:hive2://192.168.0.29:10000/default")
hivecon <- dbConnect(hivedrv, "jdbc:hive2://192.168.0.29:10000/default", "hive", "")
query = "ADD JAR /home/cloudera/git-repos/cdh-twitter-example/hive-serdes/target/hive-serdes-1.0-SNAPSHOT.jar"
hres <- dbGetQuery(hivecon, query)
hres <- dbGetQuery(hivecon, query)
query = "ADD JAR /home/cloudera/git-repos/cdh-twitter-example/hive-serdes/target/hive-serdes-1.0-SNAPSHOT.jar"
hres <- dbGetQuery(hivecon, query)
gc()
rm(list = ls())
setwd("~/GitHub/caiomsouza/big-data-science")
library(RJDBC)
hivedrv <- JDBC("org.apache.hive.jdbc.HiveDriver",
c(list.files("drivers/cdh55/hadoop",pattern="jar$",full.names=T),
list.files("drivers/cdh55/hive",pattern="jar$",full.names=T)))
hivecon <- dbConnect(hivedrv, "jdbc:hive2://192.168.0.29:10000/default", "hive", "")
query = "ADD JAR /home/cloudera/git-repos/cdh-twitter-example/hive-serdes/target/hive-serdes-1.0-SNAPSHOT.jar"
hres <- dbGetQuery(hivecon, query)
query = "select * from tweets_json2 LIMIT 10"
hres <- dbGetQuery(hivecon, query)
head(hres)
class(hres)
head(hres$tweets_json2.id)
head(hres$tweets_json2.user)
head(hres$tweets_json2.text)
setwd("~/git/Bitbucket/u-tad/tfm-v3/src/r")
library(twitteR)
library(plyr)
library(ROAuth)
library(bitops)
library(digest)
library(rjson)
install.packages(twitteR)
install.packages("twitteR")
library(twitteR)
tweets <- hres
tweets.df <- twListToDF(tweets)
tweets.df
Tweets.text = laply(tweets,function(t)t$tweets_json2.text())
Tweets.text
